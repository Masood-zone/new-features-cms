// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents system users (admins, teachers, etc.)
model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  password       String?
  name           String?
  phone          String?
  role           String     // e.g., "ADMIN", "TEACHER"
  gender         String?
  
  // Relations
  assigned_class Class?        // One-to-one relation with Class (supervisor)
  records        Record[]      // One-to-many relation with Record
  otpCodes       OtpCodes[]    // One-to-many relation with OtpCodes
  prepayments    Prepayment[]  // One-to-many relation with Prepayment (created by)

  // Timestamps
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// Settings model - stores application configuration
model Settings {
  id      Int    @id @default(autoincrement())
  name    String @unique
  value   String
}

// Class model - represents a school class
model Class {
  id           Int       @id @default(autoincrement())
  name         String    @unique // Ensure class names are unique
  description  String?
  supervisorId Int?      @unique // Each class can have one unique supervisor
  
  // Relations
  records      Record[]     // One-to-many relation with Record
  students     Student[]    // One-to-many relation with Student
  prepayments  Prepayment[] // One-to-many relation with Prepayment
  supervisor   User?        @relation(fields: [supervisorId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Indexes
  @@index([supervisorId])
}

// Student model - represents a student in a class
model Student {
  id          Int      @id @default(autoincrement())
  name        String
  age         Int
  parentPhone String?
  gender      String?
  classId     Int?
  owing       Int      @default(0)  // Track total amount owing
  
  // Relations
  class       Class?        @relation(fields: [classId], references: [id], onDelete: SetNull)
  records     Record[]      // One-to-many relation with Record
  prepayments Prepayment[]  // One-to-many relation with Prepayment
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([classId])
}

// Record model - represents a payment or attendance record
model Record {
  id             Int      @id @default(autoincrement())
  amount         Int      // Amount paid (if any)
  submitedAt     DateTime @default(now())
  submitedBy     Int
  payedBy        Int?
  isPrepaid      Boolean  @default(false)
  hasPaid        Boolean  @default(false)
  isAbsent       Boolean  @default(false)
  settingsAmount Int?     // The canteen price for this day
  classId        Int?
  owingBefore    Int      @default(0)  // Owing amount before this record
  owingAfter     Int      @default(0)  // Owing amount after this record
  description    String?  // Optional description field for detailed information
  
  // Relations
  teacher        User     @relation(fields: [submitedBy], references: [id], onDelete: Cascade)
  student        Student? @relation(fields: [payedBy], references: [id], onDelete: Cascade)
  class          Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Unique constraints
  @@unique([payedBy, submitedAt])
  
  // Indexes for performance
  @@index([submitedBy])
  @@index([payedBy])
  @@index([classId])
  @@index([submitedAt])
}

// Prepayment model - represents prepaid canteen fees for students
model Prepayment {
  id            Int      @id @default(autoincrement())
  studentId     Int
  classId       Int
  amount        Int      // Total amount prepaid
  durationType  String   // "days", "weeks", "months"
  durationValue Int      // Number of duration units (e.g., 3 for "3 days")
  startDate     DateTime // When the prepayment starts
  endDate       DateTime // When the prepayment expires
  isActive      Boolean  @default(true)
  createdBy     Int
  
  // Relations
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class         Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  creator       User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Indexes
  @@index([studentId])
  @@index([classId])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
}

// OtpCodes model - stores one-time passwords for password reset
model OtpCodes {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  // Relations
  owner     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([code])
}

// Expense model - represents a financial expense
model Expense {
  id          Int       @id @default(autoincrement())
  referenceId Int
  amount      Int
  date        DateTime  @default(now())
  description String?
  submitedBy  Int
  
  // Relations
  reference   Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Indexes
  @@index([referenceId])
  @@index([submitedBy])
  @@index([date])
}

// Reference model - categorizes expenses
model Reference {
  id          Int       @id @unique @default(autoincrement())
  name        String
  description String?
  
  // Relations
  expenses    Expense[] // One-to-many relation with Expense
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
